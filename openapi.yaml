openapi: 3.0.0
info:
  title: Sejuta Cita Backend Internship Test - Alfian Maulana
  version: 1.0.0

servers:
  - url: http://34.126.127.118
    description: Production server (GKE external load balancer)
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/alfinm01/sejutacita-be-test/1.0.0
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/login:
    post:
      summary: Authenticate user credentials and return a JWT token and a cookie with a refresh token
      operationId: authenticate
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "admin123"
              required:
                - username
                - password
      responses:
        "200":
          description: User details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "600c2b0d04978e2fc4b48040"
                  username:
                    type: string
                    example: "alfinm01"
                  name:
                    type: string
                    example: "Alfian Maulana"
                  email:
                    type: string
                    example: "alfin@test.com"
                  role:
                    type: string
                    example: "user"
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: "Username or password is incorrect"
  /auth/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      tags:
        - Auth
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: User details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "600c2b0d04978e2fc4b48040"
                  username:
                    type: string
                    example: "alfinm01"
                  name:
                    type: string
                    example: "Alfian Maulana"
                  email:
                    type: string
                    example: "alfin@test.com"
                  role:
                    type: string
                    example: "user"
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /users:
    get:
      summary: Get a list of all users
      description: Restricted to admin users.
      operationId: getAllUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "600c2b0d04978e2fc4b48040"
                    username:
                      type: string
                      example: "alfinm01"
                    name:
                      type: string
                      example: "Alfian Maulana"
                    email:
                      type: string
                      example: "alfin@test.com"
                    password:
                      type: string
                      example: "$2b$10$UYXpxxxx"
                    role:
                      type: string
                      example: "user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new user
      description: Restricted to admin users.
      operationId: createUser
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "alfinm01"
                name:
                  type: string
                  example: "Alfian Maulana"
                email:
                  type: string
                  example: "alfin@test.com"
                password:
                  type: string
                  example: "alfin123"
              required:
                - username
                - name
                - email
                - password
      responses:
        "200":
          description: An object of new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "600c2b0d04978e2fc4b48040"
                  username:
                    type: string
                    example: "alfinm01"
                  name:
                    type: string
                    example: "Alfian Maulana"
                  email:
                    type: string
                    example: "alfin@test.com"
                  password:
                    type: string
                    example: "$2b$10$UYXpxxxx"
                  role:
                    type: string
                    example: "user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: "600c2b0d04978e2fc4b48040"
        schema:
          type: string
    get:
      summary: Get a single user by id
      description: Admin users can access any user record, regular users are restricted to their own user record.
      operationId: getUserById
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "600c2b0d04978e2fc4b48040"
                  username:
                    type: string
                    example: "alfinm01"
                  name:
                    type: string
                    example: "Alfian Maulana"
                  email:
                    type: string
                    example: "alfin@test.com"
                  password:
                    type: string
                    example: "$2b$10$UYXpxxxx"
                  role:
                    type: string
                    example: "user"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update existing user
      description: Restricted to admin users.
      operationId: updateUserById
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "alfinm01"
                name:
                  type: string
                  example: "Alfian Maulana"
                email:
                  type: string
                  example: "alfin@test.com"
                password:
                  type: string
                  example: "alfin123"
      responses:
        "200":
          description: An object of updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "600c2b0d04978e2fc4b48040"
                  username:
                    type: string
                    example: "alfinm01"
                  name:
                    type: string
                    example: "Alfian Maulana"
                  email:
                    type: string
                    example: "alfin@test.com"
                  password:
                    type: string
                    example: "$2b$10$UYXpxxxx"
                  role:
                    type: string
                    example: "user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete existing user
      description: Restricted to admin users.
      operationId: deleteUserById
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Status of user deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully deleted"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"